#!/usr/bin/env python

###############################################################################
# This script generates the initial wavefunction for a multi-component 1D
# system. The initial state is supposed to be of the form:
#
#   |\Psi(t=0)> = \prod_\sigma |ns_\sigma>_\sigma,
#
# where |ns_\sigma>_\sigma is an arbitrary number state of the species \sigma.
# For each such number state, the user has to provide as many SPFs as orbitals
# are occupied.
###############################################################################

import os
import numpy as np

import QDTK
import QDTK.Wavefunction as Wavefunction
import QDTK.Tools.Mathematics as Mathematics

# import one-body Hamiltonians
from hamiltonian import get_1B_hamiltonian_A, get_1B_hamiltonian_B

# import parameters
from parameters import *

tape = (
    -10,
    2,
    0,
    MA,
    MB,
    -1,
    1,
    NA,
    -1,
    mA,
    -1,
    1,
    1,
    0,
    n,
    0,
    0,
    -1,
    2,
    NB,
    -1,
    mB,
    -1,
    1,
    1,
    0,
    n,
    -2,
)

# initial number states populations
ns_A = np.zeros(mA, int)
ns_B = np.zeros(mB, int)
ns_A[0:NA] = 1
ns_B[0:NB] = 1
# bundle initial number states populations
ns = [ns_A, ns_B]

# get 1b hamiltonians (potential term only)
hamilt_1b_UA = get_1B_hamiltonian_A()
hamilt_1b_UB = get_1B_hamiltonian_B()
# calculate eigenvalues
eigen_energies_A, eigen_states_A = hamilt_1b_UA.diag_1b_hamiltonian1d(n)
eigen_energies_B, eigen_states_B = hamilt_1b_UB.diag_1b_hamiltonian1d(n)
#
SPF_A = Wavefunction.grab_lowest_eigenfct(mA, eigen_states_A)
SPF_B = Wavefunction.grab_lowest_eigenfct(mB, eigen_states_B)
# orthonormalize 1body eigenstates for safety
Mathematics.gramSchmidt(SPF_A)
Mathematics.gramSchmidt(SPF_B)
# bundle SPFs
SPF = [SPF_A, SPF_B]
# plot SPFs
# SpfPlot.spf_plot(dvr,SPF_A)
# pyl.show()

# create initial wavefunction
# accuracies for normalization and orthogonality
eps_norm = 10 ** (-15)
eps_over = 10 ** (-15)
wfn = QDTK.Wfn(tape=tape)
wfn.init_coef_multi_spec(Ns, ns, SPF, eps_norm, eps_over, full_spf=True)
# write wavefunction to file
wfn.createWfnFile("initial_wavefunction.dat")
